buildscript {
    ext {
        jfrogBuildInfoVersion = '6.0.1'
        jacocoVersion = '0.8.11'
        springVersion = '3.5.6'
        secretProviderVersion = '0.0.5'
        jfrogUser = System.getenv('JFROG_USER')
        jfrogPassword = System.getenv('JFROG_TOKEN')
        jfrogContextUrl = System.getenv('JFROG_CONTEXT_URL')
    }

    repositories {
        mavenCentral()
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
    }

    dependencies {
        classpath 'net.researchgate:gradle-release:2.6.0'
        classpath("org.jfrog.buildinfo:build-info-extractor-gradle:$jfrogBuildInfoVersion")
    }
}

plugins {
    id 'io.spring.dependency-management' version '1.1.7'
    id 'java'
    id 'com.jfrog.artifactory' version '6.0.1'
    //id 'com.github.spotbugs' version '4.5.0'
    id 'info.solidsoft.pitest' version '1.19.0-rc.1' apply false
    id 'jacoco-report-aggregation'
    id 'base'
}

apply plugin: 'project-report'
apply from: "$rootDir/gradle/all.gradle"
apply from: "$rootDir/gradle/release.gradle"

htmlDependencyReport {
    projects = project.allprojects
}

release {
    tagTemplate = '$name-$version'
    failOnCommitNeeded = false
    failOnPublishNeeded = true
    failOnSnapshotDependencies = false
    failOnUnversionedFiles = true
    failOnUpdateNeeded = true
    revertOnFail = true
    preCommitText = '[ci skip] [CircleCI] '
    preTagCommitMessage = 'release '
    tagCommitMessage = 'release '
    newVersionCommitMessage = 'release '
    buildTasks = ['build', 'releaseBuild', 'publishCurrent']
}

allprojects {
    group = 'com.lulobank.insurance'
    version = '1.0.1'

    repositories {
        mavenLocal()

        mavenCentral()

        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
        maven {
            url = uri("https://piso19.jfrog.io/piso19/libs-release")
            credentials {
                username = jfrogUser
                password = jfrogPassword
            }
        }
        maven {
            url = uri("https://piso19.jfrog.io/piso19/libs-snapshot")
            credentials {
                username = jfrogUser
                password = jfrogPassword
            }
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'info.solidsoft.pitest'

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:$springVersion"
        }
    }

    dependencies {
        //implementation 'com.lulobank:secrets-provider-sdk-java:0.0.8'
        implementation 'com.lulobank:secrets-provider-spring-bootstrap:0.0.5'
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.mockito:mockito-core'
        testImplementation "org.jacoco:org.jacoco.core:$jacocoVersion"
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'io.projectreactor:reactor-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }

    test {
        useJUnitPlatform()
    }

    pitest {
        threads = 1
        outputFormats = ['XML', 'HTML']
        timestampedReports = false
        reportDir = file("$rootDir/build/reports/pitest/${project.name}")
        //reportDir = reporting.baseDirectory
        enableDefaultIncrementalAnalysis = true
        junit5PluginVersion = '1.2.0'
        historyInputLocation = file("$rootDir/pitest-history/input/${project.name}/history")
        historyOutputLocation = file("$rootDir/pitest-history/output/${project.name}/history")
        excludedTestClasses = ['com.lulobank.insurance.contracts.**']

        verbose = true
        useClasspathFile = true
        jvmArgs = ['-Xmx4G', '-Xms2G']

        excludedClasses = [
                'com.lulobank.insurance.config.**',
                'com.lulobank.insurance.model.**',
                'com.lulobank.insurance.exceptions.**',
                'com.lulobank.insurance.clients.**',
                'com.lulobank.insurance.mapper.**',
                'com.lulobank.insurance.utils.**',
                'com.lulobank.insurance.entry_points.**',
                'com.lulobank.insurance.adapters.**',
                'com.lulobank.insurance.validation.**',
                'com.lulobank.insurance.server.**'
        ]

        excludedMethods = ['main', 'lambda$', 'builder', 'equals', 'hashCode', 'toString']
        exportLineCoverage = true
        timeoutConstInMillis = 8000

        def threshold = project.name.contains("-domain") ? 90 : 80
        println "Setting PIT coverageThreshold to ${threshold} for project ${project.name}"
        mutationThreshold = threshold
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}
tasks.register('releaseBuild') {
    dependsOn(
            'reporting-xbc-domain:build',
            'reporting-xbc-infrastructure:build'
    )
}

tasks.register('publishCurrent') {
    dependsOn('artifactoryPublish')
}


tasks.register('jacocoRootReport', JacocoReport) {
    dependsOn subprojects.test

    doFirst {
        subprojects.each { subproject ->
            def sourceSets = subproject.extensions.findByType(SourceSetContainer)
            if (sourceSets != null) {
                additionalSourceDirs.from sourceSets.main.allSource.srcDirs
                sourceDirectories.from sourceSets.main.allSource.srcDirs
                classDirectories.from sourceSets.main.output
                executionData.from subproject.tasks.withType(JacocoReport).collect { it.executionData }
            }
        }
    }

    reports {
        html.required.set(true)
        xml.required.set(true)
        csv.required.set(false)
    }

    onlyIf { true }

//    afterEvaluate {
//        classDirectories.setFrom(files(classDirectories.files.collect {
//            fileTree(dir: it, exclude: [
//                    '**/newrelic/**',
//                    '**/agents/**'
//            ])
//        }))
//    }
}


jacocoTestCoverageVerification {
    dependsOn 'jacocoTestReport'
    violationRules {
        failOnViolation = true
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}